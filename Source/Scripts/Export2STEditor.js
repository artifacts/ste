/* Copyright (c) 2010-2011, BILD digital GmbH & Co. KG All rights reserved. BSD License Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:	* Redistributions of source code must retain the above copyright	  notice, this list of conditions and the following disclaimer.	* Redistributions in binary form must reproduce the above copyright	  notice, this list of conditions and the following disclaimer in the	  documentation and/or other materials provided with the distribution.	* Neither the name of BILD digital GmbH & Co. KG nor the	  names of its contributors may be used to endorse or promote products	  derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY BILD digital GmbH & Co. KG ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BILD digital GmbH & Co. KG BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/// enable double clicking from the Macintosh Finder or the Windows Explorer#target photoshop// in case we double clicked the fileapp.bringToFront();// debug level: 0-2 (0:disable, 1:break on error, 2:break at beginning)$.level = 1;//debugger; // launch debugger on next lineEXPORT_LAYER_NAME = "_EXPORT-STEDITOR";EXPORT_RESOLUTION = 72.0;MAX_LAYER_WIDTH = 1024;MAX_LAYER_HEIGHT = 1024;var timestamp = new Date().getTime();basePath = "~/Library/Application Support/StoryTellingEditor";imageExportFolderName = "Images/" + timestamp;importFolderName = "Import/" + timestamp// Create StoryTellingEditor Application Support Foldervar baseFolder = Folder(basePath);if (baseFolder.exists) baseFolder.create();// Create Import Foldervar importFolder = Folder(basePath + "/" + importFolderName);if(!importFolder.exists) importFolder.create();// Create Images Foldervar imageExportFolder = Folder(basePath + "/" + imageExportFolderName);if(!imageExportFolder.exists) imageExportFolder.create();exportPLISTFilename = "ste_png_export.stpngimport";// Save the current preferences var startRulerUnits = app.preferences.rulerUnits var startTypeUnits = app.preferences.typeUnitsvar startDisplayDialogs = app.displayDialogs// Set Adobe Photoshop CS3 to use pixels and display no dialogs app.preferences.rulerUnits = Units.PIXELS app.preferences.typeUnits = TypeUnits.PIXELS app.displayDialogs = DialogModes.NO// do exportmain();// Reset the application preferences app.preferences.rulerUnits = startRulerUnits app.preferences.typeUnits = startTypeUnits app.displayDialogs = startDisplayDialogsfunction hasSelection(doc) {  var res = false;  var as = doc.activeHistoryState;  doc.selection.deselect();  if (as != doc.activeHistoryState) {    res = true;    doc.activeHistoryState = as;  }  return res;};function main() {	if (app.documents.length > 0) {    // open sample file if no document is opened.		var docRef = app.activeDocument;		var versionStr = new String(app.version);		var version = parseInt(versionStr.substring(0,2));				var docHeight = parseInt(docRef.height);		var docWidth = parseInt(docRef.width);		var isPortrait = (docWidth == 768 && docHeight == 1024);		var isLandscape = (docWidth == 1024 && docHeight == 768);		var xOffset = 0;		var yOffset = 0;		var width = 0;		var height = 0;		var cropBounds;		var selectionsBoundsNotEmpty = false;		var filenameCounter = 0;		docRef.selection.selectAll();		cropBounds = docRef.selection.bounds;				xOffset = convertBounds(cropBounds)[0];		yOffset = convertBounds(cropBounds)[1];		width = convertBounds(cropBounds)[2];		height = convertBounds(cropBounds)[3];				docRef = app.activeDocument.duplicate();				var top, left, right, bottom, w, h;						var layersToBeExported = [];		var groups = getLayerSetsIndex();		var layers = getNumberOfLayer();  				for(var i = 0; i < groups.length; ++i) { 			makeActiveByIndex( groups[i], false ); 			var currentLayer = activeDocument.activeLayer; 			//currentLayer.name = currentLayer.name.toUpperCase();// no need to test for layerSet.			var name = new String(currentLayer.name);			if (name == EXPORT_LAYER_NAME) continue;			if (currentLayer.visible && currentLayer.layerSets.length == 0) {				layersToBeExported.push(currentLayer);			}		}		// add top-level art layers		layersToBeExported.reverse();		for (var i = 0; i < activeDocument.layers.length; i++) {			var currentLayer = activeDocument.layers[i];									if (currentLayer.typename != "ArtLayer") continue;			if (currentLayer.visible) {				layersToBeExported.splice(i, 0, currentLayer);			}		}		layersToBeExported.reverse();				xml  = '<?xml version="1.0" encoding="UTF-8"?>\n';		xml += '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n';		xml += '<plist version="1.0">\n';		xml += '<array>\n';				for (var i=0; i<layersToBeExported.length; i++) {			var artLayerRef = null;			// merge layersets into artLayer			docRef.activeLayer = layersToBeExported[i];						if (docRef.activeLayer.typename == "ArtLayer") {			} else {				if (docRef.activeLayer.length > 0) {					//artLayerRef = docRef.activeLayer.duplicate().merge();					var id7 = charIDToTypeID( "Mrg2" );					executeAction( id7, undefined, DialogModes.NO );				}			}			artLayerRef = docRef.activeLayer;						// render XML			var bounds = convertBounds(artLayerRef.bounds);								left = Math.max(0, bounds[0]);			top = Math.max(0, bounds[1]);			right = Math.min(MAX_LAYER_WIDTH, bounds[2]);							bottom = Math.min(MAX_LAYER_HEIGHT, bounds[3]);						// skip emtpy layers			if (right==0 || bottom==0) continue;						w = right - left;			h = bottom - top;						var nameAttr = new String(artLayerRef.name);			nameAttr = nameAttr.replace(/[^a-zA-Z0-9_-]/g, "_");			var filename = filenameCounter + '_' + nameAttr + '.png';			var filePath = basePath + "/" + imageExportFolderName + "/" + filename;									xml += '<dict>\n';			xml += '<key>importPath</key>\n';			xml += '<string>'+filePath+'</string>\n';			xml += '<key>name</key>\n';			xml += '<string>'+nameAttr+'</string>\n';			xml += '<key>frame</key>\n';			xml += '<string>{{'+left+','+top+'},{'+w+','+h+'}}</string>\n';			xml += '<key>zPosition</key>\n';			xml += '<integer>'+filenameCounter+'</integer>\n';			xml += '</dict>\n';										var pngFile = File(filePath); 			try {				//duplicate layer into new doc				dupelayerToNewDoc( docRef.activeLayer.name );				// crop document to layer bounds				activeDocument.crop(docRef.activeLayer.bounds);									// save as PNG				var saveOptions = new ExportOptionsSaveForWeb(); 				pngSaveOptions = new PNGSaveOptions(); 				pngSaveOptions.embedColorProfile = true; 				pngSaveOptions.formatOptions = FormatOptions.STANDARDBASELINE; 				pngSaveOptions.matte = MatteType.NONE; 				pngSaveOptions.quality = 1; 				pngSaveOptions.transparency = true; 				app.activeDocument.saveAs(pngFile, pngSaveOptions, true, Extension.LOWERCASE); 								// close duped doc				app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);			} catch (e) {				alert("Fehler bei Layer " + docRef.activeLayer.name + ": " + e );			}						// switch back to source document			app.activeDocument = docRef;						filenameCounter++;		}			xml += '</array>';		xml += '</plist>';				docRef.close(SaveOptions.DONOTSAVECHANGES);		var filePath = basePath + "/" + importFolderName + "/" + exportPLISTFilename;		var fileOut	= new File(filePath);		if ($.os.search(/windows/i) != -1) {			fileLineFeed = "windows" 		} else {			fileLineFeed = "macintosh"		}				fileOut.linefeed = fileLineFeed;		fileOut.open("w", "TEXT", "????");		fileOut.writeln(xml);		fileOut.close();				docRef = null;		layerSets = null;				if (version < 11) {			// below CS4			alert("Das automatische Öffnen des StoryTelling-Editors wird erst ab CS4 unterstützt. Bitte draggen Sie die folgende Datei per Hand auf das StoryTellingEditor-Icon:\n~/Library/Application Support/StoryTellingEditor/Import/ste_png_export.stpngimport");		} else {					// CS4 and later						var script = 'tell application "Finder" to set home_path to home as text\n' +			'set importfile to alias (home_path & "Library:Application Support:StoryTellingEditor:Import:'+timestamp+':ste_png_export.stpngimport")\n' +			'tell application "System Events"\n' +			'tell application "StoryTellingEditor" to open importfile\n' +			'end tell\n'			//alert(script);			var sh = app.system("osascript -e '" + script + "'");		}	}}function dupelayerToNewDoc( name ) {    var desc21 = new ActionDescriptor();	var ref14 = new ActionReference();	ref14.putClass( charIDToTypeID('Dcmn') );    desc21.putReference( charIDToTypeID('null'), ref14 );    desc21.putString( charIDToTypeID('Nm  '), name );	var ref15 = new ActionReference();	ref15.putEnumerated( charIDToTypeID('Lyr '), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );    desc21.putReference( charIDToTypeID('Usng'), ref15 );    executeAction( charIDToTypeID('Mk  '), desc21, DialogModes.NO );}function getLayerSetsAndLayersForExport(root, allLayers) {	var layerSet;	var name;	//alert("processing layer " + root.name);		for (var i=0; i<root.layers.length; i++) {				name = new String(root.layers[i].name);				if (name.charAt(0) == '_') {			allLayers.push(root.layers[i]);		} else {			if (root.layers[i].typename == "LayerSet") {				getLayerSetsAndLayersForExport(root.layers[i], allLayers);			}		}	}		return allLayers;}function cleanupLayerSets(doc) {	for (var i=0; i < doc.layerSets.length; i++) {		if (doc.layerSets[i].name != EXPORT_LAYER_NAME) {			doc.layerSets[i].remove();		}	}}function convertBounds(bounds) {	var top, left, right, bottom, w, h;	left = parseInt(bounds[0]);	top = parseInt(bounds[1]);	right = parseInt(bounds[2]);	bottom = parseInt(bounds[3]);	var convertedBounds = new Array();	convertedBounds[0] = left;	convertedBounds[1] = top;	convertedBounds[2] = right;	convertedBounds[3] = bottom;	return convertedBounds;}function getNumberOfLayer(){ 	var ref = new ActionReference(); 	ref.putEnumerated( charIDToTypeID("Dcmn"), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") ); 	var desc = executeActionGet(ref); 	var numberOfLayer = desc.getInteger(charIDToTypeID("NmbL")); 	return numberOfLayer; }function getLayerSetsIndex(){ 	function getNumberLayers(){ 		var ref = new ActionReference(); 		ref.putProperty( charIDToTypeID("Prpr") , charIDToTypeID("NmbL") ) 		ref.putEnumerated( charIDToTypeID("Dcmn"), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") ); 		return executeActionGet(ref).getInteger(charIDToTypeID("NmbL")); 	} 	function hasBackground() { 		var ref = new ActionReference(); 		ref.putProperty( charIDToTypeID("Prpr"), charIDToTypeID( "Bckg" )); 		ref.putEnumerated(charIDToTypeID( "Lyr " ),charIDToTypeID( "Ordn" ),charIDToTypeID( "Back" ))//bottom Layer/background 		var desc =  executeActionGet(ref); 		var res = desc.getBoolean(charIDToTypeID( "Bckg" )); 		return res        }; 	function getLayerType(idx,prop) {         		var ref = new ActionReference(); 		//ref.putProperty( 1349677170 , prop); 		ref.putIndex(charIDToTypeID( "Lyr " ), idx); 		var desc =  executeActionGet(ref); 		var type = desc.getEnumerationValue(prop); 		var res = typeIDToStringID(type); 		return res        }; 	var cnt = getNumberLayers()+1; 	var res = new Array(); 	if(hasBackground()){ 		var i = 0; 	}else{ 		var i = 1; 	}; 	var prop =  stringIDToTypeID("layerSection")  	for(i;i<cnt;i++){ 		var temp = getLayerType(i,prop);		if(temp == "layerSectionStart") res.push(i); 	}; 	return res; }; function makeActiveByIndex( idx, visible ){     var desc = new ActionDescriptor(); 	var ref = new ActionReference(); 	ref.putIndex(charIDToTypeID( "Lyr " ), idx) 	desc.putReference( charIDToTypeID( "null" ), ref ); 	desc.putBoolean( charIDToTypeID( "MkVs" ), visible ); 	executeAction( charIDToTypeID( "slct" ), desc, DialogModes.NO ); }; 